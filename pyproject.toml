[project]
name = "scientific-literature-intelligence"
version = "0.1.0"
description = "Scientific Literature Intelligence System for technical interviews"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"

# Core dependencies for the project
dependencies = [
    # Database and ORM
    "sqlalchemy>=2.0.0",
    
    # Data manipulation and analysis
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    
    # Data generation and testing
    "faker>=20.0.0",
    
    # API frameworks
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Environment and config management
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # HTTP clients for API integration
    "httpx>=0.25.0",
    "requests>=2.31.0",
    
    # Data validation and serialization
    "marshmallow>=3.20.0",
    
    # Logging and monitoring
    "structlog>=23.2.0",
    
    # CLI tools
    "click>=8.1.0",
    "rich>=13.7.0",
    
    # Date/time handling
    "python-dateutil>=2.8.0",
    
    # JSON handling
    "orjson>=3.9.0",
]

# Optional dependencies for different use cases
[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

# AI/ML dependencies for future phases
ml = [
    "scikit-learn>=1.3.0",
    "torch>=2.1.0",
    "transformers>=4.35.0",
    "sentence-transformers>=2.2.0",
]

# API integration dependencies
apis = [
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "elevenlabs>=0.2.0",
]

# Big data processing (PySpark)
spark = [
    "pyspark>=3.5.0",
    "delta-spark>=3.0.0",
]

# Data visualization
viz = [
    "plotly>=5.17.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
]

# All optional dependencies
all = [
    "scientific-literature-intelligence[dev,ml,apis,spark,viz]"
]

[project.urls]
Homepage = "https://github.com/agdoko/scientific-literature-intelligence"
Repository = "https://github.com/agdoko/scientific-literature-intelligence"
Issues = "https://github.com/agdoko/scientific-literature-intelligence/issues"

[project.scripts]
# CLI entry points
sci-lit = "src.cli:main"
sci-lit-server = "src.api.server:start"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

# Tool configurations
[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]